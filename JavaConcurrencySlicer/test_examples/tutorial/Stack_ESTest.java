/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 20 11:35:59 GMT 2016
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import tutorial.Stack;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true)
public class Stack_ESTest extends Stack_ESTest_scaffolding {

	@Test(timeout = 4000)
	public void test0() throws Throwable {
		Stack<Object> stack0 = new Stack<Object>();
		PrivateAccess.setVariable((Class<Stack>) Stack.class, (Stack) stack0, "pointer", (Object) (-99));
		stack0.isEmpty();
		// Undeclared exception!
		try {
			stack0.pop();
			fail("Expecting exception: EmptyStackException");

		} catch (EmptyStackException e) {
			//
			// no message in exception (getMessage() returned null)
			//
			verifyException("tutorial.Stack", e);
		}
		Stack<Object> stack1 = new Stack<Object>();
		stack1.push(".TFa");
		stack1.push(".TFa");
	}

	@Test(timeout = 4000)
	public void test1() throws Throwable {
		Stack<String> stack0 = new Stack<String>();
		Stack<Object> stack1 = new Stack<Object>();
		stack1.push(".TFa");
		stack1.push(stack0);
		stack1.push(".TFa");
		stack1.push(stack0);
		stack1.push(stack0);
		stack1.push(".TFa");
		stack1.push(".TFa");
		stack1.push(stack1);
		stack1.push(".TFa");
		stack1.push(".TFa");
		Object object0 = new Object();
		// Undeclared exception!
		try {
			stack1.push(object0);
			fail("Expecting exception: RuntimeException");

		} catch (RuntimeException e) {
			//
			// Stack exceeded capacity!
			//
			verifyException("tutorial.Stack", e);
		}
	}

	@Test(timeout = 4000)
	public void test2() throws Throwable {
		Stack<Object> stack0 = new Stack<Object>();
		stack0.push((Object) null);
		assertFalse(stack0.isEmpty());

		stack0.pop();
		assertTrue(stack0.isEmpty());
	}

	@Test(timeout = 4000)
	public void test3() throws Throwable {
		Stack<String> stack0 = new Stack<String>();
		stack0.push(".TFaE");
		Stack<Object> stack1 = new Stack<Object>();
		stack1.push(".TFaE");
		stack1.push(stack0);
		stack1.push(".TFaE");
		stack1.push(stack0);
		Object[] objectArray0 = new Object[9];
		objectArray0[0] = (Object) ".TFaE";
		objectArray0[1] = (Object) stack1;
		objectArray0[2] = (Object) ".TFaE";
		Object object0 = mock(Object.class, new ViolatedAssumptionAnswer());
		objectArray0[3] = object0;
		objectArray0[4] = (Object) ".TFaE";
		objectArray0[5] = (Object) ".TFaE";
		objectArray0[6] = (Object) stack0;
		objectArray0[7] = (Object) stack0;
		objectArray0[8] = (Object) stack0;
		PrivateAccess.setVariable((Class<Stack>) Stack.class, (Stack) stack1, "objects", (Object) objectArray0);
		stack1.push(stack0);
		stack0.push(".TFaE");
		stack0.pop();
		stack0.pop();
		stack1.push(".TFaE");
		stack1.push(stack1);
		stack1.isEmpty();
		stack1.isEmpty();
		stack1.push(".TFaE");
		stack1.push(".TFZaE");
		Object object1 = new Object();
		// Undeclared exception!
		try {
			stack1.push(object1);
			fail("Expecting exception: ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {
			//
			// 9
			//
			verifyException("tutorial.Stack", e);
		}
	}

	@Test(timeout = 4000)
	public void test4() throws Throwable {
		Stack<Integer> stack0 = new Stack<Integer>();
		Integer integer0 = new Integer(0);
		stack0.push(integer0);
		PrivateAccess.setVariable((Class<Stack>) Stack.class, (Stack) stack0, "pointer", (Object) 0);
		Stack<Object> stack1 = new Stack<Object>();
		stack1.push(integer0);
		stack1.pop();
		Stack<String> stack2 = new Stack<String>();
		PrivateAccess.setVariable((Class<Stack>) Stack.class, (Stack) stack2, "pointer", (Object) 1948);
		// Undeclared exception!
		try {
			stack2.pop();
			fail("Expecting exception: ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {
			//
			// 1947
			//
			verifyException("tutorial.Stack", e);
		}
	}

	@Test(timeout = 4000)
	public void test5() throws Throwable {
		Stack<Object> stack0 = new Stack<Object>();
		stack0.isEmpty();
		// Undeclared exception!
		try {
			stack0.pop();
			fail("Expecting exception: EmptyStackException");

		} catch (EmptyStackException e) {
			//
			// no message in exception (getMessage() returned null)
			//
			verifyException("tutorial.Stack", e);
		}
	}

	@Test(timeout = 4000)
	public void test6() throws Throwable {
		Stack<Object> stack0 = new Stack<Object>();
		PrivateAccess.setVariable((Class<Stack>) Stack.class, (Stack) stack0, "pointer", (Object) 2155);
		// Undeclared exception!
		try {
			stack0.push(stack0);
			fail("Expecting exception: RuntimeException");

		} catch (RuntimeException e) {
			//
			// Stack exceeded capacity!
			//
			verifyException("tutorial.Stack", e);
		}
	}
}
